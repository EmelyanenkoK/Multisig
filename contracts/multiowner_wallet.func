#include "imports/stdlib.fc";
#include "types.func";
#include "op-codes.func";
#include "errors.func";
#include "messages.func";
#include "order_helpers.func";

const int EXPERIMENTAL_FEATURES = 0;

(cell -> cell) prepare_guard_execution(cont c) asm "NOP";

int validate_dictionary_sequence(cell dict) impure {
    int index = -1;
    int expected_index = 0;
    do {
        (index, slice value, int found?) = dict.udict_get_next?(INDEX_SIZE, index);
        if (found?) {
            throw_unless(error::invalid_dictionary_sequence, index == expected_index);
            expected_index += 1;
        }
    } until (~ found?);
    return expected_index;
}

((int, cell, int, cell, cell, cell), ()) ~execute_order ((int, cell, int, cell, cell, cell) storage,
cell order_body) impure {

    accept_message();

    (int threshold,
        cell signers, int signers_num,
        cell proposers,
        cell modules, cell guard) = storage;

    int action_index = -1;
    do {
        (action_index, slice action, int found?) = order_body.udict_get_next?(ACTION_INDEX_SIZE, action_index);
        if (found?) {
            action = action.preload_ref().begin_parse();
            int action_op = action~load_op();
            if(action_op == actions::send_message) {
                int mode = action~load_uint(8);
                ;; Potentially multisig can init order in this request, but since
                ;; order will reject second initialisation there is no security issue
                send_raw_message(action~load_ref(), mode);
            } elseif (action_op == actions::update_multisig_params) {
                threshold = action~load_index();
                signers = action~load_dict();
                signers_num = validate_dictionary_sequence(signers);
                proposers = action~load_dict();
                validate_dictionary_sequence(proposers);
                modules = action~load_dict();
                guard = action~load_maybe_ref();
            }
        }
    } until (~ found?);
    return ((threshold, signers, signers_num,
        proposers, modules, guard), ());
}


(int, int, cell, int, cell, cell, cell) load_data() {
    slice ds = get_data().begin_parse();
    (int next_order_seqno, int threshold,
        cell signers, int signers_num,
        cell proposers,
        cell modules, cell guard) = (ds~load_order_seqno(), ds~load_index(),
        ds~load_dict(), ds~load_index(),
        ds~load_dict(),
        ds~load_dict(), ds~load_maybe_ref());
    return (next_order_seqno, threshold,
        signers, signers_num,
        proposers,
        modules, guard);
}

() save_data (int next_order_seqno, int threshold,
cell signers, int signers_num,
cell proposers,
cell modules, cell guard) impure {
    begin_cell().store_order_seqno(next_order_seqno).store_index(threshold)
    .store_dict(signers).store_index(signers_num)
    .store_dict(proposers)
    .store_dict(modules).store_maybe_ref(guard)
    .end_cell()
    .set_data();
}

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender = cs~load_msg_addr();

    (int op, int query_id) = in_msg_body~load_body_header();

    (int next_order_seqno, int threshold,
        cell signers, int signers_num,
        cell proposers,
        cell modules, cell guard) = load_data();

    if(op == op::new_order) {
        int signer? = in_msg_body~load_bool();
        int index = in_msg_body~load_index();
        int expiration_date = in_msg_body~load_timestamp();
        cell order_body = in_msg_body~load_dict();
        (slice value, int found?) = (signer? ? signers : proposers).udict_get?(8, index);
        throw_unless(error::unauthorized_new_order, found?);
        throw_unless(error::unauthorized_new_order, equal_slice_bits(sender, value));
        throw_unless(error::unauthorized_new_order, ~ order_body.null?());

        int minimal_value = calculate_order_processing_cost(order_body, expiration_date - now());
        throw_unless(error::not_enough_ton, msg_value > minimal_value);

        cell state_init = calculate_order_state_init(my_address(), next_order_seqno);
        slice order_address = calculate_address_by_state_init(BASECHAIN, state_init);
        builder init_body = begin_cell().store_body_header(op::init, 0)
        .store_index(threshold)
        .store_dict(signers)
        .store_index(signers_num)
        .store_timestamp(expiration_date)
        .store_ref(order_body)
        .store_bool(signer?);
        if(signer?) {
            init_body = init_body.store_index(index);
        }
        send_msg_builder_with_stateinit(order_address, 0,
            state_init,
            init_body,
            msgflag::BOUNCEABLE,
            sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);
        next_order_seqno += 1;
    } elseif(op == op::execute) {
        ;; check that sender is order smart-contract and check that it has recent
        ;; signers dict

        int order_seqno = in_msg_body~load_order_seqno();
        int signers_hash = in_msg_body~load_hash();
        cell order_body = in_msg_body~load_ref();

        cell state_init = calculate_order_state_init(my_address(), order_seqno);
        slice order_address = calculate_address_by_state_init(BASECHAIN, state_init);

        throw_unless(error::unauthorized_execute, equal_slice_bits(sender, order_address));
        throw_unless(error::singers_outdated, signers_hash == signers.cell_hash());

        (threshold, signers, signers_num,
            proposers, modules, guard)~execute_order(order_body);
    } elseif (op == op::execute_internal) {
        ;; we always trust ourselves, this feature is used to make chains of executions
        ;; where last action of previous execution triggers new one.

        throw_unless(error::unauthorized_execute, equal_slice_bits(sender, my_address()));
        cell order_body = in_msg_body~load_ref();
        (threshold, signers, signers_num,
            proposers, modules, guard)~execute_order(order_body);
    }

    if (EXPERIMENTAL_FEATURES & (op == op::execute_from_module) & (~ null?(modules))) {
        (_, _, _, int found?) = modules.pfxdict_get?(sender.slice_bits(), sender);
        throw_unless(error::unauthorized_execute, found?);
        cell order_body = in_msg_body~load_ref();
        (threshold, signers, signers_num,
            proposers, modules, guard)~execute_order(order_body);
    }

    if (EXPERIMENTAL_FEATURES & (~ null?(guard)) ) {
        slice guard_slice = guard.begin_parse();
        (cell guard_code, cell guard_data) = (guard_slice~load_ref(), guard_slice~load_ref());

        ;; guard may check incoming message, c4, c5 and optionally update it's own storage/code
        guard = prepare_guard_execution(guard_code.begin_parse().bless()) (in_msg_full);
    }

    save_data(next_order_seqno, threshold,
        signers, signers_num,
        proposers,
        modules, guard);
}

(int, int, cell, cell, cell, cell) get_multiowner_data() method_id  {
    (int next_order_seqno, int threshold,
        cell signers, int signers_num,
        cell proposers,
        cell modules, cell guard) = load_data();
    throw_unless(error::inconsistent_data, signers_num == validate_dictionary_sequence(signers));
    validate_dictionary_sequence(proposers);
    return (next_order_seqno, threshold,
        signers, proposers,
        modules, guard);
}

(int) get_order_estimate(cell order, int expiration_date) method_id {
    return calculate_order_processing_cost(order, expiration_date - now());
}

slice get_order_address(int order_seqno) method_id {
    cell state_init = calculate_order_state_init(my_address(), order_seqno);
    return calculate_address_by_state_init(BASECHAIN, state_init);
}