#include "types.func";
#include "auto/order_code.func";

cell order_init_data(slice multisig, int seqno) {
    return begin_cell().store_slice(multisig).store_order_seqno(seqno).end_cell();
}


cell calculate_order_state_init (slice multisig, int seqno) {
    return begin_cell()
            .store_uint(0, 1 + 1) ;; split_depth (Maybe = 0) and special (Maybe = 0)
            .store_maybe_ref(order_code())
            .store_maybe_ref(order_init_data(multisig, seqno))
            .store_uint(0,1) ;; libraries - empty cell
            .end_cell();
}

slice calculate_address_by_state_init(int workchain, cell state_init) inline {
    return begin_cell().store_uint(4, 3) ;; 0x100 : $10 + anycast (Maybe = 0)
            .store_workchain(workchain)
            .store_uint(
                    cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

const int CONFIG::storage_prices = 18;
const int CONFIG::basechain_gas_prices = 21;
const int CONFIG::basechain_fwd_prices = 25;


(int, int, int, int, int, int, int, int) get_fee_constants() {
    cell storage_config = config_param(CONFIG::storage_prices);
    ;; lets get latest prices
    (int timestamp, slice storage_slice, int found?) = storage_config.udict_get_max?(32);
    storage_slice~skip_bits(32 + 8); ;; skip constructor byte and utime_since
    (int bit_price_ps, int cell_price_ps) = (storage_slice~load_uint(64), storage_slice~load_uint(64));
    
    slice gas_config = config_param(CONFIG::basechain_gas_prices).begin_parse();
    gas_config~skip_bits(8); ;;gas_flat_pfx tag
    (int flat_gas_limit, int flat_gas_price) = (gas_config~load_uint(64), gas_config~load_uint(64));
    gas_config~skip_bits(8); ;;gas_prices tag
    (int gas_price) = (gas_config~load_uint(64));
    
    slice fwd_config = config_param(CONFIG::basechain_fwd_prices).begin_parse().skip_bits(8); ;; skip tag
    (int lump_price, int bit_price, int cell_price) = (fwd_config~load_uint(64), fwd_config~load_uint(64), fwd_config~load_uint(64));
    
   return (bit_price_ps, cell_price_ps, flat_gas_limit, flat_gas_price, gas_price, lump_price, bit_price, cell_price);
}

const int MULTISIG_INIT_ORDER_GAS = 17053; ;; 255 signers
const int ORDER_INIT_GAS = 4727;
const int ORDER_EXECUTE_GAS = 9676;
const int MULTISIG_EXECUTE_GAS = 9022; ;; For single transfer action order
;; we call number of bits/cells without order bits/cells as "overhead"
const int INIT_ORDER_BIT_OVERHEAD = 4470;
const int INIT_ORDER_CELL_OVERHEAD = 19;
const int ORDER_STATE_BIT_OVERHEAD = 4901;
const int ORDER_STATE_CELL_OVERHEAD = 19;
const int EXECUTE_ORDER_BIT_OVERHEAD = 384;
const int EXECUTE_ORDER_CELL_OVERHEAD = 1;

int flat_gas_wrapper(int flat_gas_limit, int flat_gas_price, int gas_price, int gas) {
    int flat_part = min(gas, flat_gas_limit);
    return (flat_gas_price + (gas - flat_part) * gas_price) / 65536;
}

int calculate_order_processing_cost(cell order_body, int duration) {
    {- There are following costs:
       1) Gas cost on Multisig contract
       2) Forward cost for Multisig->Order message
       3) Gas cost on Order initialisation
       4) Storage cost on Order
       5) Gas cost on Order finalization
       6) Forward cost for Order->Multisig message
       7) Gas cost on Multisig till accept_message
    -}
    var (bit_price_ps, cell_price_ps, flat_gas_limit, flat_gas_price, gas_price, lump_price, bit_price, cell_price) = 
    get_fee_constants();
    (int order_cells, int order_bits, _) = compute_data_size(order_body, 2048);
    return flat_gas_wrapper(flat_gas_limit, flat_gas_price, gas_price, MULTISIG_INIT_ORDER_GAS) +
           flat_gas_wrapper(flat_gas_limit, flat_gas_price, gas_price, ORDER_INIT_GAS) +
           flat_gas_wrapper(flat_gas_limit, flat_gas_price, gas_price, ORDER_EXECUTE_GAS) +
           flat_gas_wrapper(flat_gas_limit, flat_gas_price, gas_price, MULTISIG_EXECUTE_GAS) +
           2 * lump_price + (((INIT_ORDER_BIT_OVERHEAD + EXECUTE_ORDER_BIT_OVERHEAD + 2 * order_bits) * bit_price) +
           ((INIT_ORDER_CELL_OVERHEAD + EXECUTE_ORDER_CELL_OVERHEAD + 2 * order_cells) * cell_price)) ^/ 65536 +
           (((ORDER_STATE_BIT_OVERHEAD + order_bits) * bit_price_ps * duration) +
           ((ORDER_STATE_CELL_OVERHEAD + order_cells) * cell_price_ps * duration)) ^/ 65536;
           ;; 2 * lump_price +
           ;; muldiv((INIT_ORDER_BIT_OVERHEAD + EXECUTE_ORDER_BIT_OVERHEAD + 2 * order_bits), bit_price, 65536) +
           ;; muldiv((INIT_ORDER_CELL_OVERHEAD + EXECUTE_ORDER_CELL_OVERHEAD + 2 * order_cells), cell_price, 65536) +
           ;; muldiv(ORDER_STATE_BIT_OVERHEAD + order_bits, bit_price_ps * duration, 65536) +
           ;; muldiv(ORDER_STATE_CELL_OVERHEAD + order_cells, cell_price_ps * duration, 65536);
}
